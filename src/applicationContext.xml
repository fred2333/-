<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd">
	

	<!-- 配置dataSource -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"><!-- 数据库编码必须为UTF-8 -->
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/st?useUnicode=true&amp;characterEncoding=UTF-8" />
		<property name="user" value="root" />
		<property name="password" value="root" />
		<!--连接池中保留的最小连接数。-->
		<property name="minPoolSize" value="10" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="50" />
		<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="1800" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3" />
		<property name="maxStatements" value="500" />
		<property name="initialPoolSize" value="10" />
	</bean>


	<!-- 配置sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!-- <prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop> -->
				<prop key="hibernate.connection.autocommit">false</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<property name="mappingResources">  
		<!-- 不同于使用的mappingResources，mappingDirectoryLocations不需要指定xml文件，直接导到文件夹，而且需要加classpath: -->
			<list>
				<value>s/model/Order.hbm.xml</value>
				<value>s/model/OrderItem.hbm.xml</value>
				<value>s/model/Category.hbm.xml</value>
				<value>s/model/Product.hbm.xml</value>
				<value>s/model/User.hbm.xml</value>
				<value>s/model/Admin.hbm.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- 事务管理器类 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 注解方式实现事务，即@Transactional -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- 配置dao -->
	<bean id="userDao" class="s.dao.UserDao">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="categoryDao" class="s.dao.CategoryDao">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="productDao" class="s.dao.ProductDao">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="orderDao" class="s.dao.OrderDao">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="adminDao" class="s.dao.AdminDao">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置service -->
	<bean id="userService" class="s.service.UserService">
		<property name="userDao" ref="userDao" />
	</bean>
	<bean id="categoryService" class="s.service.CategoryService">
		<property name="categoryDao" ref="categoryDao" />
	</bean>
	<bean id="productService" class="s.service.ProductService">
		<property name="productDao" ref="productDao" />
	</bean>
	<bean id="orderService" class="s.service.OrderService">
		<property name="orderDao" ref="orderDao" />
	</bean>
	<bean id="adminService" class="s.service.AdminService">
		<property name="adminDao" ref="adminDao" />
	</bean>
	
	
	<!-- 配置action -->
	<bean id="userAction" class="s.action.UserAction" scope="prototype">
		<property name="userService" ref="userService" />
		<property name="categoryService" ref="categoryService" />
		<property name="productService" ref="productService" />
	</bean>
	<bean id="categoryAction" class="s.action.CategoryAction" scope="prototype">
		<property name="categoryService" ref="categoryService" />
	</bean>
	<bean id="productAction" class="s.action.ProductAction" scope="prototype">
		<property name="productService" ref="productService" />
	</bean>
	<bean id="cartAction" class="s.action.CartAction" scope="prototype">
		<property name="productService" ref="productService" />
	</bean>
	<bean id="orderAction" class="s.action.OrderAction" scope="prototype">
		<property name="orderService" ref="orderService" />
	</bean>
	<bean id="adminAction" class="s.action.AdminAction" scope="prototype">
		<property name="adminService" ref="adminService" />
		<property name="productService" ref="productService" />
		<property name="categoryService" ref="categoryService" />
		<property name="orderService" ref="orderService" />
	</bean>
</beans>



